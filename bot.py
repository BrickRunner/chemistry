import os
import sqlite3
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from db import init_db, get_sections, get_topics_by_section, get_files_for_topic, delete_file_by_type
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.makedirs("files", exist_ok=True)
load_dotenv() 
TOKEN = os.getenv("TOKEN")
GROUP = os.getenv("GROUP")
TEACHERS = os.getenv("TEACHER") 
ADMINS = os.getenv("ADMIN")  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class Form(StatesGroup):
    section = State()
    topic = State()
    action = State()
    add_section = State()
    add_topic = State()
    file_type = State()
    file_upload = State()
    delete_section = State()
    delete_topic = State()
    delete_type = State()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def back_button():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥–∞ /start: –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    sections = get_sections()
    print("Sections from DB:", sections)  # <-- –¥–æ–±–∞–≤—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    buttons = [types.KeyboardButton(text=s) for s in get_sections()]
    keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[btn] for btn in buttons],  # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
    resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    await state.set_state(Form.section)

# –í—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∞
@dp.message(Form.section)
async def choose_topic(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        # –ù–∞ /start –Ω–µ—Ç –∫—É–¥–∞ –Ω–∞–∑–∞–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–æ—Å
        await start(message, state)
        return

    section = message.text
    await state.update_data(section=section)
    topics = get_topics_by_section(section)

    buttons = [InlineKeyboardButton(text=t, callback_data=f"topic:{t}") for t in topics]
    buttons.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_sections"))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])


    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)
    await state.set_state(None)

# Callback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É
@dp.callback_query(lambda c: c.data and c.data.startswith("topic:"))
async def topic_callback(callback: CallbackQuery, state: FSMContext):
    topic = callback.data.split("topic:")[1]
    await state.update_data(topic=topic)

    actions = ["–¢–µ–æ—Ä–∏—è", "–ó–∞–¥–∞–Ω–∏–µ", "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "–ù–∞–∑–∞–¥"]
    buttons = [types.KeyboardButton(text=a) for a in actions]
    keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[btn] for btn in buttons], 
    resize_keyboard=True)
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(Form.action)
    await callback.answer() 

# Callback: –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤
@dp.callback_query(lambda c: c.data == "back_to_sections")
async def back_to_sections_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete_reply_markup()  # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await start(callback.message, state)
    await callback.answer()

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@dp.message(Form.topic)
async def dummy_topic_message(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
@dp.message(Form.action)
async def send_file(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        data = await state.get_data()
        section = data.get("section")
        if section:
            await choose_topic(message, state)
        else:
            await start(message, state)
        return

    action = message.text
    data = await state.get_data()
    section = data["section"]
    topic = data["topic"]
    files = get_files_for_topic(topic)

    file_path = None
    if action == "–¢–µ–æ—Ä–∏—è":
        file_path = files[0]
    elif action == "–ó–∞–¥–∞–Ω–∏–µ":
        file_path = files[1]
    elif action == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ":
        file_path = files[2]

    if file_path:
        await message.answer_document(document=types.FSInputFile(f"files/{file_path}"))
        report = f"üìò *{message.from_user.full_name}* –∑–∞–ø—Ä–æ—Å–∏–ª: {section} > {topic} > {action}"
        await bot.send_message(chat_id=GROUP, text=report, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await start(message, state)

# –ö–æ–º–∞–Ω–¥–∞ /add_file ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
@dp.message(Command("add_file"))
async def add_file_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(user_id)
    if user_id != int(TEACHERS) and user_id != int(ADMINS):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
        return

    buttons = [types.KeyboardButton(text=s) for s in get_sections()]
    buttons.append(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[btn] for btn in buttons],  # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
    resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", reply_markup=keyboard)
    await state.set_state(Form.add_section)

# –í–≤–æ–¥ —Ç–µ–º—ã
@dp.message(Form.add_section)
async def add_file_topic(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.", reply_markup=types.ReplyKeyboardRemove())
        return

    await state.update_data(section=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω):", reply_markup=back_button())
    await state.set_state(Form.add_topic)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (—Ç–µ–æ—Ä–∏—è, –∑–∞–¥–∞–Ω–∏–µ, –¥–æ–º.–∑–∞–¥–∞–Ω–∏–µ)
@dp.message(Form.add_topic)
async def add_file_type(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await add_file_start(message, state)
        return

    await state.update_data(topic=message.text)
    buttons = [
        types.KeyboardButton(text="–¢–µ–æ—Ä–∏—è"),
        types.KeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ"),
        types.KeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        types.KeyboardButton(text="–ù–∞–∑–∞–¥")
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞:", reply_markup=keyboard)
    await state.set_state(Form.file_type)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Form.file_type)
async def upload_file_prompt(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await add_file_topic(message, state)
        return

    await state.update_data(file_type=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOC –∏ —Ç.–¥.):", reply_markup=back_button())
    await state.set_state(Form.file_upload)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
@dp.message(Command("delete_file"))
async def delete_file_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id != int(TEACHERS) and user_id != int(ADMINS):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
        return

    sections = get_sections()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=s)] for s in sections] + [[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    await state.set_state(Form.delete_section)

# –í–≤–æ–¥ —Ç–µ–º—ã
@dp.message(Form.delete_section)
async def delete_file_choose_topic(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return

    section = message.text
    topics = get_topics_by_section(section)
    if not topics:
        await message.answer("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç —Ç–µ–º.")
        return

    await state.update_data(section=section)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=t)] for t in topics] + [[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)
    await state.set_state(Form.delete_topic)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (—Ç–µ–æ—Ä–∏—è, –∑–∞–¥–∞–Ω–∏–µ, –¥–æ–º.–∑–∞–¥–∞–Ω–∏–µ)
@dp.message(Form.delete_topic)
async def delete_file_choose_type(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await delete_file_start(message, state)
        return

    await state.update_data(topic=message.text)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–¢–µ–æ—Ä–∏—è")],
            [types.KeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(Form.delete_type)

# –£–¥–∞–ª–µ–Ω–∏–µ
@dp.message(Form.delete_type)
async def delete_selected_file(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await delete_file_choose_type(message, state)
        return

    data = await state.get_data()
    section = data["section"]
    topic = data["topic"]
    file_type = message.text

    result = delete_file_by_type(section, topic, file_type)

    if result == "not_found":
        await message.answer(f"‚ùó –§–∞–π–ª {file_type} —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    elif result == "no_topic":
        await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif result == "deleted":
        await message.answer(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–µ–º—ã *{topic}*.", parse_mode=ParseMode.MARKDOWN)
    elif result == "topic_removed":
        await message.answer(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω.\nüìÇ –ü–æ—Å–∫–æ–ª—å–∫—É –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–º–µ *{topic}* –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî —Ç–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞.", parse_mode=ParseMode.MARKDOWN)

    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ.", reply_markup=types.ReplyKeyboardRemove())

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message(Form.file_upload)
async def receive_file(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await add_file_type(message, state)
        return

    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.", reply_markup=back_button())
        return

    data = await state.get_data()
    section = data["section"]
    topic = data["topic"]
    file_type = data["file_type"]

    file = message.document
    filename = f"{section}_{topic}_{file_type}_{file.file_name}".replace(" ", "_")
    file_path = f"files/{filename}"

    await bot.download(file, destination=file_path)

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM topics WHERE section = ? AND topic = ?", (section, topic))
    row = cursor.fetchone()

    if row:
        column = {
            "–¢–µ–æ—Ä–∏—è": "theory_file",
            "–ó–∞–¥–∞–Ω–∏–µ": "task_file",
            "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ": "homework_file"
        }[file_type]

        cursor.execute(f"UPDATE topics SET {column} = ? WHERE id = ?", (filename, row[0]))
    else:
        theory = task = hw = None
        if file_type == "–¢–µ–æ—Ä–∏—è": theory = filename
        elif file_type == "–ó–∞–¥–∞–Ω–∏–µ": task = filename
        elif file_type == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ": hw = filename

        cursor.execute('''
            INSERT INTO topics (section, topic, theory_file, task_file, homework_file)
            VALUES (?, ?, ?, ?, ?)
        ''', (section, topic, theory, task, hw))

    conn.commit()
    conn.close()

    await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
